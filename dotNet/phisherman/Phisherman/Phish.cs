using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading;
using AutoIt;
using Microsoft.Exchange.WebServices.Data;

namespace Phisherman
{
	// Token: 0x02000006 RID: 6
	internal class Phish
	{
		// Token: 0x0600000C RID: 12 RVA: 0x00002578 File Offset: 0x00000778
		public static void Catch(ExchangeService exchangeService, Collection<ItemId> itemIds, string emailAddress)
		{
			try
			{
				Collection<EmailMessage> newEmailBatch = Email.GetNewEmailBatch(exchangeService, itemIds);
				string path = string.Empty;
				string text = string.Empty;
				Process process = null;
				ThreadStart <>9__0;
				foreach (EmailMessage emailMessage in newEmailBatch)
				{
					if (!Phish.RecipientIsSender(emailAddress, emailMessage))
					{
						emailMessage.IsRead = true;
						exchangeService.UpdateItems(newEmailBatch, 4, 1, new MessageDisposition?(0), null);
						if (emailMessage.HasAttachments)
						{
							path = Phish.SaveAttachment(emailMessage);
							Thread.Sleep(500);
							if (!string.IsNullOrEmpty(path) && File.Exists(path))
							{
								ThreadStart start;
								if ((start = <>9__0) == null)
								{
									start = (<>9__0 = delegate()
									{
										process = Process.Start(path);
									});
								}
								new Thread(start).Start();
							}
							Thread.Sleep(2000);
							AutoItX.WinActivate("Internet Explorer", "");
							if (AutoItX.WinWaitActive("Open File - Security Warning", "", 10) != 0)
							{
								AutoItX.Send("!{r}", 0);
								AutoItX.Send("!{o}", 0);
							}
						}
						else if (emailMessage.Body.Text.Length > 0)
						{
							text = Phish.ExtractURL(emailMessage);
							if (!string.IsNullOrEmpty(text))
							{
								Payload.OpenURL(text);
							}
						}
						Thread.Sleep(15000);
						if (process != null && !string.IsNullOrEmpty(process.ProcessName) && !process.HasExited)
						{
							process.Kill();
						}
						Thread.Sleep(1500);
						if (!string.IsNullOrEmpty(path))
						{
							File.Delete(path);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Debug.Log("Catch", ex.Message + "\n\n" + ex.StackTrace);
			}
		}

		// Token: 0x0600000D RID: 13 RVA: 0x0000279C File Offset: 0x0000099C
		private static bool RecipientIsSender(string email, EmailMessage message)
		{
			string text = message.Sender.ToString();
			try
			{
				int num = text.IndexOf("<") + "<".Length;
				int num2 = text.IndexOf(">");
				text = text.Substring(num, num2 - num).Replace("SMTP:", "");
			}
			catch (Exception ex)
			{
				Debug.Log("IsRecipientSender", ex.Message);
			}
			return email == text;
		}

		// Token: 0x0600000E RID: 14 RVA: 0x00002820 File Offset: 0x00000A20
		private static string SaveAttachment(EmailMessage message)
		{
			string text = string.Empty;
			try
			{
				FileAttachment fileAttachment = message.Attachments[0] as FileAttachment;
				text = "H:\\Downloads\\" + fileAttachment.Name;
				fileAttachment.Load(text);
			}
			catch (Exception ex)
			{
				Debug.Log("SaveAttachment", ex.Message);
			}
			return text;
		}

		// Token: 0x0600000F RID: 15 RVA: 0x00002884 File Offset: 0x00000A84
		private static string ExtractURL(EmailMessage message)
		{
			string text = message.Body.Text;
			string text2;
			try
			{
				int num = text.IndexOf("<") + "<".Length;
				int num2 = text.IndexOf(">");
				text2 = text.Substring(num, num2 - num).Trim().Replace("\n", "").Replace("\r", "");
			}
			catch
			{
				text2 = Regex.Match(text, "http(s)?:\\/\\/(.*)(?=>)?").Groups[0].Value;
			}
			if (string.IsNullOrEmpty(text2))
			{
				Debug.Log("ExtractURL", "Failed to parse URL");
			}
			return text2;
		}
	}
}
